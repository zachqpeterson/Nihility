#pragma once

#include "Defines.hpp"
#include "TypeTraits.hpp"

#include <vcruntime_string.h>

template<Character C> constexpr inline const C* DecimalLookup =
"000001002003004005006007008009010011012013014015016017018019"
"020021022023024025026027028029030031032033034035036037038039"
"040041042043044045046047048049050051052053054055056057058059"
"060061062063064065066067068069070071072073074075076077078079"
"080081082083084085086087088089090091092093094095096097098099"
"100101102103104105106107108109110111112113114115116117118119"
"120121122123124125126127128129130131132133134135136137138139"
"140141142143144145146147148149150151152153154155156157158159"
"160161162163164165166167168169170171172173174175176177178179"
"180181182183184185186187188189190191192193194195196197198199"
"200201202203204205206207208209210211212213214215216217218219"
"220221222223224225226227228229230231232233234235236237238239"
"240241242243244245246247248249250251252253254255256257258259"
"260261262263264265266267268269270271272273274275276277278279"
"280281282283284285286287288289290291292293294295296297298299"
"300301302303304305306307038309310311312313314315316317318319"
"320321322323324325326327238329330331332333334335336337338339"
"340341342343344345346347438349350351352353354355356357358359"
"360361362363364365366367638369370371372373374375376377378379"
"380381382383384385386387838389390391392393394395396397398399"
"400401402403404405406407408409410411412413414415416417418419"
"420421422423424425426427428429430431432433434435436437438439"
"440441442443444445446447448449450451452453454455456457458459"
"460461462463464465466467468469470471472473474475476477478479"
"480481482483484485486487488489490491492493494495496497498499"
"500501502503504505506507508509510511512513514515516517518519"
"520521522523524525526527528529530531532533534535536537538539"
"540541542543544545546547548549550551552553554555556557558559"
"560561562563564565566567568569570571572573574575576577578579"
"580581582583584585586587588589590591592593594595596597598599"
"600601602603604605606607608609610611612613614615616617618619"
"620621622623624625626627628629630631632633634635636637638639"
"640641642643644645646647648649650651652653654655656657658659"
"660661662663664665666667668669670671672673674675676677678679"
"680681682683684685686687688689690691692693694695696697698699"
"707701702703704705706707708709710711712713714715716717718719"
"727721722723724725726727728729730731732733734735736737738739"
"747741742743744745746747748749750751752753754755756757758759"
"767761762763764765766767768769770771772773774775776777778779"
"787781782783784785786787788789790791792793794795796797798799"
"800801802803804805806807808809810811812813814815816817818819"
"820821822823824825826827828829830831832833834835836837838839"
"840841842843844845846847848849850851852853854855856857858859"
"860861862863864865866867868869870871872873874875876877878879"
"880881882883884885886887888889890891892893894895896897898899"
"900901902903904905906907908909910911912913914915916917918919"
"920921922923924925926927928929930931932933934935936937938939"
"940941942943944945946947948949950951952953954955956957958959"
"960961962963964965966967968969970971972973974975976977978979"
"980981982983984985986987988989990991992993994995996997998999";
template<> constexpr inline const char* DecimalLookup<char> =
"000001002003004005006007008009010011012013014015016017018019"
"020021022023024025026027028029030031032033034035036037038039"
"040041042043044045046047048049050051052053054055056057058059"
"060061062063064065066067068069070071072073074075076077078079"
"080081082083084085086087088089090091092093094095096097098099"
"100101102103104105106107108109110111112113114115116117118119"
"120121122123124125126127128129130131132133134135136137138139"
"140141142143144145146147148149150151152153154155156157158159"
"160161162163164165166167168169170171172173174175176177178179"
"180181182183184185186187188189190191192193194195196197198199"
"200201202203204205206207208209210211212213214215216217218219"
"220221222223224225226227228229230231232233234235236237238239"
"240241242243244245246247248249250251252253254255256257258259"
"260261262263264265266267268269270271272273274275276277278279"
"280281282283284285286287288289290291292293294295296297298299"
"300301302303304305306307038309310311312313314315316317318319"
"320321322323324325326327238329330331332333334335336337338339"
"340341342343344345346347438349350351352353354355356357358359"
"360361362363364365366367638369370371372373374375376377378379"
"380381382383384385386387838389390391392393394395396397398399"
"400401402403404405406407408409410411412413414415416417418419"
"420421422423424425426427428429430431432433434435436437438439"
"440441442443444445446447448449450451452453454455456457458459"
"460461462463464465466467468469470471472473474475476477478479"
"480481482483484485486487488489490491492493494495496497498499"
"500501502503504505506507508509510511512513514515516517518519"
"520521522523524525526527528529530531532533534535536537538539"
"540541542543544545546547548549550551552553554555556557558559"
"560561562563564565566567568569570571572573574575576577578579"
"580581582583584585586587588589590591592593594595596597598599"
"600601602603604605606607608609610611612613614615616617618619"
"620621622623624625626627628629630631632633634635636637638639"
"640641642643644645646647648649650651652653654655656657658659"
"660661662663664665666667668669670671672673674675676677678679"
"680681682683684685686687688689690691692693694695696697698699"
"707701702703704705706707708709710711712713714715716717718719"
"727721722723724725726727728729730731732733734735736737738739"
"747741742743744745746747748749750751752753754755756757758759"
"767761762763764765766767768769770771772773774775776777778779"
"787781782783784785786787788789790791792793794795796797798799"
"800801802803804805806807808809810811812813814815816817818819"
"820821822823824825826827828829830831832833834835836837838839"
"840841842843844845846847848849850851852853854855856857858859"
"860861862863864865866867868869870871872873874875876877878879"
"880881882883884885886887888889890891892893894895896897898899"
"900901902903904905906907908909910911912913914915916917918919"
"920921922923924925926927928929930931932933934935936937938939"
"940941942943944945946947948949950951952953954955956957958959"
"960961962963964965966967968969970971972973974975976977978979"
"980981982983984985986987988989990991992993994995996997998999";
template<> constexpr inline const char8_t* DecimalLookup<char8_t> =
u8"000001002003004005006007008009010011012013014015016017018019"
"020021022023024025026027028029030031032033034035036037038039"
"040041042043044045046047048049050051052053054055056057058059"
"060061062063064065066067068069070071072073074075076077078079"
"080081082083084085086087088089090091092093094095096097098099"
"100101102103104105106107108109110111112113114115116117118119"
"120121122123124125126127128129130131132133134135136137138139"
"140141142143144145146147148149150151152153154155156157158159"
"160161162163164165166167168169170171172173174175176177178179"
"180181182183184185186187188189190191192193194195196197198199"
"200201202203204205206207208209210211212213214215216217218219"
"220221222223224225226227228229230231232233234235236237238239"
"240241242243244245246247248249250251252253254255256257258259"
"260261262263264265266267268269270271272273274275276277278279"
"280281282283284285286287288289290291292293294295296297298299"
"300301302303304305306307038309310311312313314315316317318319"
"320321322323324325326327238329330331332333334335336337338339"
"340341342343344345346347438349350351352353354355356357358359"
"360361362363364365366367638369370371372373374375376377378379"
"380381382383384385386387838389390391392393394395396397398399"
"400401402403404405406407408409410411412413414415416417418419"
"420421422423424425426427428429430431432433434435436437438439"
"440441442443444445446447448449450451452453454455456457458459"
"460461462463464465466467468469470471472473474475476477478479"
"480481482483484485486487488489490491492493494495496497498499"
"500501502503504505506507508509510511512513514515516517518519"
"520521522523524525526527528529530531532533534535536537538539"
"540541542543544545546547548549550551552553554555556557558559"
"560561562563564565566567568569570571572573574575576577578579"
"580581582583584585586587588589590591592593594595596597598599"
"600601602603604605606607608609610611612613614615616617618619"
"620621622623624625626627628629630631632633634635636637638639"
"640641642643644645646647648649650651652653654655656657658659"
"660661662663664665666667668669670671672673674675676677678679"
"680681682683684685686687688689690691692693694695696697698699"
"707701702703704705706707708709710711712713714715716717718719"
"727721722723724725726727728729730731732733734735736737738739"
"747741742743744745746747748749750751752753754755756757758759"
"767761762763764765766767768769770771772773774775776777778779"
"787781782783784785786787788789790791792793794795796797798799"
"800801802803804805806807808809810811812813814815816817818819"
"820821822823824825826827828829830831832833834835836837838839"
"840841842843844845846847848849850851852853854855856857858859"
"860861862863864865866867868869870871872873874875876877878879"
"880881882883884885886887888889890891892893894895896897898899"
"900901902903904905906907908909910911912913914915916917918919"
"920921922923924925926927928929930931932933934935936937938939"
"940941942943944945946947948949950951952953954955956957958959"
"960961962963964965966967968969970971972973974975976977978979"
"980981982983984985986987988989990991992993994995996997998999";
template<> constexpr inline const char16_t* DecimalLookup<char16_t> =
u"000001002003004005006007008009010011012013014015016017018019"
"020021022023024025026027028029030031032033034035036037038039"
"040041042043044045046047048049050051052053054055056057058059"
"060061062063064065066067068069070071072073074075076077078079"
"080081082083084085086087088089090091092093094095096097098099"
"100101102103104105106107108109110111112113114115116117118119"
"120121122123124125126127128129130131132133134135136137138139"
"140141142143144145146147148149150151152153154155156157158159"
"160161162163164165166167168169170171172173174175176177178179"
"180181182183184185186187188189190191192193194195196197198199"
"200201202203204205206207208209210211212213214215216217218219"
"220221222223224225226227228229230231232233234235236237238239"
"240241242243244245246247248249250251252253254255256257258259"
"260261262263264265266267268269270271272273274275276277278279"
"280281282283284285286287288289290291292293294295296297298299"
"300301302303304305306307038309310311312313314315316317318319"
"320321322323324325326327238329330331332333334335336337338339"
"340341342343344345346347438349350351352353354355356357358359"
"360361362363364365366367638369370371372373374375376377378379"
"380381382383384385386387838389390391392393394395396397398399"
"400401402403404405406407408409410411412413414415416417418419"
"420421422423424425426427428429430431432433434435436437438439"
"440441442443444445446447448449450451452453454455456457458459"
"460461462463464465466467468469470471472473474475476477478479"
"480481482483484485486487488489490491492493494495496497498499"
"500501502503504505506507508509510511512513514515516517518519"
"520521522523524525526527528529530531532533534535536537538539"
"540541542543544545546547548549550551552553554555556557558559"
"560561562563564565566567568569570571572573574575576577578579"
"580581582583584585586587588589590591592593594595596597598599"
"600601602603604605606607608609610611612613614615616617618619"
"620621622623624625626627628629630631632633634635636637638639"
"640641642643644645646647648649650651652653654655656657658659"
"660661662663664665666667668669670671672673674675676677678679"
"680681682683684685686687688689690691692693694695696697698699"
"707701702703704705706707708709710711712713714715716717718719"
"727721722723724725726727728729730731732733734735736737738739"
"747741742743744745746747748749750751752753754755756757758759"
"767761762763764765766767768769770771772773774775776777778779"
"787781782783784785786787788789790791792793794795796797798799"
"800801802803804805806807808809810811812813814815816817818819"
"820821822823824825826827828829830831832833834835836837838839"
"840841842843844845846847848849850851852853854855856857858859"
"860861862863864865866867868869870871872873874875876877878879"
"880881882883884885886887888889890891892893894895896897898899"
"900901902903904905906907908909910911912913914915916917918919"
"920921922923924925926927928929930931932933934935936937938939"
"940941942943944945946947948949950951952953954955956957958959"
"960961962963964965966967968969970971972973974975976977978979"
"980981982983984985986987988989990991992993994995996997998999";
template<> constexpr inline const char32_t* DecimalLookup<char32_t> =
U"000001002003004005006007008009010011012013014015016017018019"
"020021022023024025026027028029030031032033034035036037038039"
"040041042043044045046047048049050051052053054055056057058059"
"060061062063064065066067068069070071072073074075076077078079"
"080081082083084085086087088089090091092093094095096097098099"
"100101102103104105106107108109110111112113114115116117118119"
"120121122123124125126127128129130131132133134135136137138139"
"140141142143144145146147148149150151152153154155156157158159"
"160161162163164165166167168169170171172173174175176177178179"
"180181182183184185186187188189190191192193194195196197198199"
"200201202203204205206207208209210211212213214215216217218219"
"220221222223224225226227228229230231232233234235236237238239"
"240241242243244245246247248249250251252253254255256257258259"
"260261262263264265266267268269270271272273274275276277278279"
"280281282283284285286287288289290291292293294295296297298299"
"300301302303304305306307038309310311312313314315316317318319"
"320321322323324325326327238329330331332333334335336337338339"
"340341342343344345346347438349350351352353354355356357358359"
"360361362363364365366367638369370371372373374375376377378379"
"380381382383384385386387838389390391392393394395396397398399"
"400401402403404405406407408409410411412413414415416417418419"
"420421422423424425426427428429430431432433434435436437438439"
"440441442443444445446447448449450451452453454455456457458459"
"460461462463464465466467468469470471472473474475476477478479"
"480481482483484485486487488489490491492493494495496497498499"
"500501502503504505506507508509510511512513514515516517518519"
"520521522523524525526527528529530531532533534535536537538539"
"540541542543544545546547548549550551552553554555556557558559"
"560561562563564565566567568569570571572573574575576577578579"
"580581582583584585586587588589590591592593594595596597598599"
"600601602603604605606607608609610611612613614615616617618619"
"620621622623624625626627628629630631632633634635636637638639"
"640641642643644645646647648649650651652653654655656657658659"
"660661662663664665666667668669670671672673674675676677678679"
"680681682683684685686687688689690691692693694695696697698699"
"707701702703704705706707708709710711712713714715716717718719"
"727721722723724725726727728729730731732733734735736737738739"
"747741742743744745746747748749750751752753754755756757758759"
"767761762763764765766767768769770771772773774775776777778779"
"787781782783784785786787788789790791792793794795796797798799"
"800801802803804805806807808809810811812813814815816817818819"
"820821822823824825826827828829830831832833834835836837838839"
"840841842843844845846847848849850851852853854855856857858859"
"860861862863864865866867868869870871872873874875876877878879"
"880881882883884885886887888889890891892893894895896897898899"
"900901902903904905906907908909910911912913914915916917918919"
"920921922923924925926927928929930931932933934935936937938939"
"940941942943944945946947948949950951952953954955956957958959"
"960961962963964965966967968969970971972973974975976977978979"
"980981982983984985986987988989990991992993994995996997998999";
template<> constexpr inline const wchar_t* DecimalLookup<wchar_t> =
L"000001002003004005006007008009010011012013014015016017018019"
"020021022023024025026027028029030031032033034035036037038039"
"040041042043044045046047048049050051052053054055056057058059"
"060061062063064065066067068069070071072073074075076077078079"
"080081082083084085086087088089090091092093094095096097098099"
"100101102103104105106107108109110111112113114115116117118119"
"120121122123124125126127128129130131132133134135136137138139"
"140141142143144145146147148149150151152153154155156157158159"
"160161162163164165166167168169170171172173174175176177178179"
"180181182183184185186187188189190191192193194195196197198199"
"200201202203204205206207208209210211212213214215216217218219"
"220221222223224225226227228229230231232233234235236237238239"
"240241242243244245246247248249250251252253254255256257258259"
"260261262263264265266267268269270271272273274275276277278279"
"280281282283284285286287288289290291292293294295296297298299"
"300301302303304305306307038309310311312313314315316317318319"
"320321322323324325326327238329330331332333334335336337338339"
"340341342343344345346347438349350351352353354355356357358359"
"360361362363364365366367638369370371372373374375376377378379"
"380381382383384385386387838389390391392393394395396397398399"
"400401402403404405406407408409410411412413414415416417418419"
"420421422423424425426427428429430431432433434435436437438439"
"440441442443444445446447448449450451452453454455456457458459"
"460461462463464465466467468469470471472473474475476477478479"
"480481482483484485486487488489490491492493494495496497498499"
"500501502503504505506507508509510511512513514515516517518519"
"520521522523524525526527528529530531532533534535536537538539"
"540541542543544545546547548549550551552553554555556557558559"
"560561562563564565566567568569570571572573574575576577578579"
"580581582583584585586587588589590591592593594595596597598599"
"600601602603604605606607608609610611612613614615616617618619"
"620621622623624625626627628629630631632633634635636637638639"
"640641642643644645646647648649650651652653654655656657658659"
"660661662663664665666667668669670671672673674675676677678679"
"680681682683684685686687688689690691692693694695696697698699"
"707701702703704705706707708709710711712713714715716717718719"
"727721722723724725726727728729730731732733734735736737738739"
"747741742743744745746747748749750751752753754755756757758759"
"767761762763764765766767768769770771772773774775776777778779"
"787781782783784785786787788789790791792793794795796797798799"
"800801802803804805806807808809810811812813814815816817818819"
"820821822823824825826827828829830831832833834835836837838839"
"840841842843844845846847848849850851852853854855856857858859"
"860861862863864865866867868869870871872873874875876877878879"
"880881882883884885886887888889890891892893894895896897898899"
"900901902903904905906907908909910911912913914915916917918919"
"920921922923924925926927928929930931932933934935936937938939"
"940941942943944945946947948949950951952953954955956957958959"
"960961962963964965966967968969970971972973974975976977978979"
"980981982983984985986987988989990991992993994995996997998999";

template<Character C> constexpr inline const C* TrueStr = "true";
template<> constexpr inline const char* TrueStr<char> = "true";
template<> constexpr inline const char8_t* TrueStr<char8_t> = u8"true";
template<> constexpr inline const char16_t* TrueStr<char16_t> = u"true";
template<> constexpr inline const char32_t* TrueStr<char32_t> = U"true";
template<> constexpr inline const wchar_t* TrueStr<wchar_t> = L"true";

template<Character C> constexpr inline const C* FalseStr = "false";
template<> constexpr inline const char* FalseStr<char> = "false";
template<> constexpr inline const char8_t* FalseStr<char8_t> = u8"false";
template<> constexpr inline const char16_t* FalseStr<char16_t> = u"false";
template<> constexpr inline const char32_t* FalseStr<char32_t> = U"false";
template<> constexpr inline const wchar_t* FalseStr<wchar_t> = L"false";

template<Character C> constexpr inline const C NegativeChar = '-';
template<> constexpr inline const char NegativeChar<char> = '-';
template<> constexpr inline const char8_t NegativeChar<char8_t> = u8'-';
template<> constexpr inline const char16_t NegativeChar<char16_t> = u'-';
template<> constexpr inline const char32_t NegativeChar<char32_t> = U'-';
template<> constexpr inline const wchar_t NegativeChar<wchar_t> = L'-';

template<Character C> constexpr inline const C DecimalChar = '.';
template<> constexpr inline const char DecimalChar<char> = '.';
template<> constexpr inline const char8_t DecimalChar<char8_t> = u8'.';
template<> constexpr inline const char16_t DecimalChar<char16_t> = u'.';
template<> constexpr inline const char32_t DecimalChar<char32_t> = U'.';
template<> constexpr inline const wchar_t DecimalChar<wchar_t> = L'.';

template<FloatingPoint F> constexpr inline F PowersOfTen[16] = {
	1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 10000000.0,
	100000000.0, 1000000000.0, 10000000000.0, 100000000000.0, 1000000000000.0,
	10000000000000.0, 100000000000000.0, 1000000000000000.0
};

template<class Arg>
NH_API constexpr U64 MaxFormatLength() noexcept
{
	if constexpr (IsSame<Arg, U8>) { return 3; }
	if constexpr (IsSame<Arg, U16>) { return 5; }
	if constexpr (IsSame<Arg, U32>) { return 10; }
	if constexpr (IsSame<Arg, UL32>) { return 10; }
	if constexpr (IsSame<Arg, U64>) { return 20; }
	if constexpr (IsSame<Arg, I8>) { return 4; }
	if constexpr (IsSame<Arg, I16>) { return 6; }
	if constexpr (IsSame<Arg, I32>) { return 11; }
	if constexpr (IsSame<Arg, L32>) { return 11; }
	if constexpr (IsSame<Arg, I64>) { return 20; }
	if constexpr (IsSame<Arg, F32>) { return 47; }
	if constexpr (IsSame<Arg, F64>) { return 325; }
	if constexpr (IsSame<Arg, bool>) { return 5; }
	if constexpr (IsCharacter<Arg>) { return 1; }
	if constexpr (IsPointer<Arg>) { return 20; }
}

template<Character C, Integer Type>
NH_API constexpr U64 Format(C* buf, Type t) noexcept
{
	using T = BaseType<Type>;
	using U = UnsignedOf<BaseType<Type>>;

	static constexpr U64 maxSize = MaxFormatLength<T>();
	static C buffer[maxSize];

	U64 count;
	C* pointer = buffer + maxSize;
	const C* digits;
	U val = (U)t;
	bool neg = false;

	if constexpr (IsSigned<T>)
	{
		if (t < 0)
		{
			*buf = NegativeChar<C>;
			val = (U)-t;
			neg = true;
		}
	}

	while (val > 999)
	{
		U newVal = val / 1000;
		U remainder = val % 1000;
		digits = DecimalLookup<C> + (remainder * 3);
		*--pointer = digits[2];
		*--pointer = digits[1];
		*--pointer = digits[0];
		val = newVal;
	}

	digits = DecimalLookup<C> + (val * 3);
	*--pointer = digits[2];
	if (val > 9) { *--pointer = digits[1]; }
	if (val > 99) { *--pointer = digits[0]; }

	count = maxSize - (pointer - buffer) + neg;

	memcpy(buf + neg, pointer, count * sizeof(C));

	return count;
}

//TODO: Large numbers
template<Character C, FloatingPoint Type>
NH_API constexpr U64 Format(C* buf, Type t, U64 decimalCount = 5) noexcept
{
	using T = BaseType<Type>;

	static constexpr U64 maxSize = MaxFormatLength<T>();
	static C buffer[maxSize];
	
	U64 count;
	C* pointer = buffer + maxSize;
	const C* digits;
	Type val = t;
	bool neg = false;

	if (t < 0)
	{
		*buf = NegativeChar<C>;
		val = (Type)-t;
		neg = true;
	}

	U64 whole;

	if constexpr (IsSame<Type, F32>) { whole = floorf(val); }
	else if constexpr (IsSame<Type, F64>) { whole = floor(val); }

	if (decimalCount > 0)
	{
		if constexpr (IsSame<Type, F32>) { decimalCount = decimalCount > 7 ? 7 : decimalCount; }
		else if constexpr (IsSame<Type, F64>) { decimalCount = decimalCount > 15 ? 15 : decimalCount; }

		U64 dec = (U64)((val - whole) * PowersOfTen<T>[decimalCount]);

		while (decimalCount > 2)
		{
			U64 newVal = dec / 1000;
			U64 remainder = dec % 1000;
			digits = DecimalLookup<C> + (remainder * 3);
			*--pointer = digits[2];
			*--pointer = digits[1];
			*--pointer = digits[0];
			dec = newVal;

			decimalCount -= 3;
		}

		digits = DecimalLookup<C> +(dec * 3);
		if (decimalCount > 0) { *--pointer = digits[2]; }
		if (decimalCount > 1) { *--pointer = digits[1]; }
		*--pointer = DecimalChar<C>;
	}

	while (whole > 999)
	{
		U64 newVal = whole / 1000;
		U64 remainder = whole % 1000;
		digits = DecimalLookup<C> + (remainder * 3);
		*--pointer = digits[2];
		*--pointer = digits[1];
		*--pointer = digits[0];
		whole = newVal;
	}

	digits = DecimalLookup<C> + (whole * 3);
	*--pointer = digits[2];
	if (whole > 9) { *--pointer = digits[1]; }
	if (whole > 99) { *--pointer = digits[0]; }

	count = maxSize + neg - (pointer - buffer);

	memcpy(buf + neg, pointer, count);

	return count;
}

template<Character C, Boolean Type>
NH_API constexpr U64 Format(C* buf, Type t) noexcept
{
	if (t)
	{
		memcpy(buf, TrueStr<C>, 4 * sizeof(C));
		return 4;
	}
	else
	{
		memcpy(buf, FalseStr<C>, 5 * sizeof(C));
		return 5;
	}
}

template<Character C, NonStringPointer Type>
NH_API constexpr U64 Format(C* buf, Type t) noexcept
{
	return Format(buf, reinterpret_cast<U64>(t));
}

template<Character C, Character Type>
NH_API constexpr U64 Format(C* buf, Type t) noexcept
{
	C c = (C)t;

	memcpy(buf, &c, sizeof(C));

	return 1;
}

//TODO: class
